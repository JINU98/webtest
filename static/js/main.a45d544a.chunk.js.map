{"version":3,"sources":["components/WebcamCapture.js","App.js","reportWebVitals.js","index.js"],"names":["videoConstraints","width","height","facingMode","WebcamCapture","commands","command","callback","capture","webcamRef","useSpeechRecognition","transcript","React","useRef","useCallback","imageSrc","current","getScreenshot","ReactDOM","render","src","document","getElementById","audio","ref","screenshotFormat","onClick","SpeechRecognition","startListening","stopListening","id","Dictaphone","useState","message","setMessage","food","browserSupportsSpeechRecognition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","App"],"mappings":"mNASMA,EAAmB,CACrBC,MAAO,KACPC,OAAQ,IACRC,WAAY,QA2CCC,EAxCO,WAEpB,IAAMC,EAAW,CACb,CACEC,QAAS,UACTC,SAAU,kBAAMC,OAMhBC,GAFmBC,+BAAqB,CAAEL,aAAtCM,WAEQC,IAAMC,OAAO,OAEzBL,EAAUI,IAAME,aACpB,WACE,IAAMC,EAAWN,EAAUO,QAAQC,gBAEnCC,IAASC,OAAO,qBAAKC,IAAKL,IAAcM,SAASC,eAAe,YAElE,CAACb,IAGH,OACE,qCACE,cAAC,IAAD,CACEc,OAAO,EACPrB,OAAQ,IACRsB,IAAKf,EACLgB,iBAAiB,aACjBxB,MAAO,KACPD,iBAAkBA,IAEpB,wBAAQ0B,QAASlB,EAAjB,2BACA,wBAAQkB,QAASC,IAAkBC,eAAnC,mBACF,wBAAQF,QAASC,IAAkBE,cAAnC,kBACE,qBAAKC,GAAG,cClBDC,EA3BI,WAAO,IAAD,EAIOC,mBAAS,IAJhB,mBAIhBC,EAJgB,KAIPC,EAJO,KAKjB7B,EAAW,CACf,CACEC,QAAS,UACTC,SAAU,SAAC4B,GAAD,OAAUD,EAAW,WAI3BvB,EAAeD,+BAAqB,CAAEL,aAAtCM,WAER,OAAKgB,IAAkBS,mCAKrB,gCACE,cAAC,EAAD,IAEA,4BAAIH,IACJ,4BAAItB,OARC,MCRI0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdpB,IAASC,OACP,cAAC,IAAM2B,WAAP,UACE,cAACC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,M","file":"static/js/main.a45d544a.chunk.js","sourcesContent":["import React, { useState,useRef,useCallback } from 'react'\r\nimport Webcam from \"react-webcam\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\n\r\n\r\n    \r\n \r\nconst videoConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: \"user\"\r\n  };\r\n   \r\n  const WebcamCapture = () => {\r\n\r\n    const commands = [\r\n        {\r\n          command: 'Capture',\r\n          callback: () => capture()\r\n        }\r\n      ]\r\n    \r\n      const { transcript } = useSpeechRecognition({ commands })\r\n\r\n    const webcamRef = React.useRef(null);\r\n   \r\n    const capture = React.useCallback(\r\n      () => {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        const image1=<img src={imageSrc} />\r\n        ReactDOM.render(<img src={imageSrc} />, document.getElementById('test1'));\r\n      },\r\n      [webcamRef]\r\n    );\r\n   \r\n    return (\r\n      <>\r\n        <Webcam\r\n          audio={false}\r\n          height={720}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          width={1280}\r\n          videoConstraints={videoConstraints}\r\n        />\r\n        <button onClick={capture}>Capture photo</button>\r\n        <button onClick={SpeechRecognition.startListening}>Start</button>\r\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\r\n        <div id='test1'></div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default WebcamCapture;","import React, { useState } from 'react'\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n\nimport WebcamCapture from './components/WebcamCapture.js'\n\nconst Dictaphone = () => {\n\n  \n\n  const [message, setMessage] = useState('')\n  const commands = [\n    {\n      command: 'Capture',\n      callback: (food) => setMessage(`Done`)\n    }\n  ]\n\n  const { transcript } = useSpeechRecognition({ commands })\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null\n  }\n\n  return (\n    <div>\n      <WebcamCapture></WebcamCapture>\n \n      <p>{message}</p>\n      <p>{transcript}</p>\n    </div>\n  )\n}\nexport default Dictaphone","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}